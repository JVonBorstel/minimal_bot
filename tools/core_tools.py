"""Core tools that are always available to users."""

import logging
from typing import Dict, Any, List
from ._tool_decorator import tool_function
from config import Config

log = logging.getLogger(__name__)


@tool_function(
    name="help",
    description="Get help and show available commands. Use this when users ask for help, what you can do, or how to use the bot.",
    parameters_schema={
        "type": "object",
        "properties": {
            "topic": {
                "type": "string", 
                "description": "Optional specific topic to get help about"
            }
        },
        "required": []
    },
    categories=["assistance", "documentation"],
    tags=["help", "support", "guide", "commands", "usage", "what can you do", "available", "tools"],
    importance=4  # Reduced importance from 10
)
async def help(topic: str = None, config: Config = None) -> Dict[str, Any]:
    """
    Provides help and shows available commands to the user.
    
    Args:
        topic: Optional specific topic to get help about
        config: Configuration object (injected)
        
    Returns:
        Dict containing help information
    """
    log.info(f"Help tool called with topic: {topic}")
    
    help_response = {
        "title": "ü§ñ Augie ChatOps Bot - Help & Commands",
        "description": "I'm here to help you with development tasks, project management, and information retrieval!",
        "sections": []
    }
    
    # General help
    general_section = {
        "name": "üåü Getting Started",
        "content": [
            "Just type naturally! I understand context and can help with:",
            "‚Ä¢ Creating and managing GitHub issues and pull requests",
            "‚Ä¢ Working with Jira tickets and project planning",
            "‚Ä¢ Searching code and repositories",
            "‚Ä¢ Finding information online",
            "‚Ä¢ And much more!"
        ]
    }
    help_response["sections"].append(general_section)
    
    # Command examples
    examples_section = {
        "name": "üí° Example Commands",
        "content": [
            "**GitHub:**",
            "‚Ä¢ 'Create a GitHub issue for the login bug'",
            "‚Ä¢ 'Show my open pull requests'",
            "‚Ä¢ 'Search for authentication code in the repository'",
            "",
            "**Jira:**",
            "‚Ä¢ 'Create a new Jira ticket for the API feature'",
            "‚Ä¢ 'Show my assigned Jira issues'",
            "‚Ä¢ 'What's in the current sprint?'",
            "",
            "**Code & Search:**",
            "‚Ä¢ 'Find all Python files with database queries'",
            "‚Ä¢ 'Search the web for React best practices'",
            "‚Ä¢ 'Analyze the codebase structure'"
        ]
    }
    help_response["sections"].append(examples_section)
    
    # Tool categories
    categories_section = {
        "name": "üõ†Ô∏è Available Tool Categories",
        "content": [
            "**GitHub Tools**: Repository management, issues, PRs, code search",
            "**Jira Tools**: Project management, tickets, sprints, workflows",
            "**Greptile Tools**: Semantic code search and analysis",
            "**Perplexity Tools**: Web search and current information",
            "**Core Tools**: Help, status, and basic utilities"
        ]
    }
    help_response["sections"].append(categories_section)
    
    # Tips
    tips_section = {
        "name": "üí° Pro Tips",
        "content": [
            "‚Ä¢ Be specific about what you want to do",
            "‚Ä¢ I maintain context, so you can have natural conversations",
            "‚Ä¢ For complex tasks, I'll guide you through the process",
            "‚Ä¢ Just ask if you need clarification on anything!"
        ]
    }
    help_response["sections"].append(tips_section)
    
    # Topic-specific help
    if topic:
        topic_lower = topic.lower()
        if "github" in topic_lower:
            topic_section = {
                "name": f"üìö Help: GitHub",
                "content": [
                    "**GitHub capabilities:**",
                    "‚Ä¢ Create, update, and close issues",
                    "‚Ä¢ Manage pull requests and reviews",
                    "‚Ä¢ Search code across repositories",
                    "‚Ä¢ List and analyze repositories",
                    "‚Ä¢ Work with commits and branches",
                    "‚Ä¢ Manage GitHub Actions workflows"
                ]
            }
            help_response["sections"].append(topic_section)
        elif "jira" in topic_lower:
            topic_section = {
                "name": f"üìö Help: Jira",
                "content": [
                    "**Jira capabilities:**",
                    "‚Ä¢ Create and update tickets",
                    "‚Ä¢ Manage sprints and boards",
                    "‚Ä¢ Search and filter issues",
                    "‚Ä¢ Work with projects and epics",
                    "‚Ä¢ Track progress and generate reports",
                    "‚Ä¢ Handle workflows and transitions"
                ]
            }
            help_response["sections"].append(topic_section)
    
    # Return just the help_response data - the decorator will wrap it
    return help_response


# You can add more core tools here in the future
# For example: status, ping, feedback, etc. 